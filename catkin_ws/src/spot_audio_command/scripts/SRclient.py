from __future__ import division, with_statement, print_function
# remember to set this environment variable before running the nlp server 
# export CLASSPATH=$CLASSPATH:~/Spot_Project/CoreNLP/*:

import rospy
from nltk.parse.corenlp import CoreNLPDependencyParser
from ros_speech_recognition import SpeechRecognitionClient
from .utils import MapKnowledge, Action, RobotSpeechClient, TestCase

def parse_dep(dep_tree):
    '''parse a single dependence tree, may result in several commands
    '''
    action = Action()
    action.parse_dep(dep_tree)
    action.print_info()
    return action.gen_command()

def simplify(cmd_list):
    ''' remove duplicated commands from the list
    '''
    # TODO add rules to eliminate duplicates
    return cmd_list

def gen_commands(dep_parser, sentence):
    """ process a sentence, and generates a list of navigation goals and tasks

    Args:
        dep_parser : CoreNLPDependencyParser
        sentence (string): the sentence to analyze, should be generated by speech
        recognition process, which is SpeechRecognitionClient()

    Returns:
        cmd_list: a list whose element is (navigation_goal, task_at_goal)
    """
    
    parses = dep_parser.parse(sentence.split())

    parse_results = [[(governor, dep, dependent) 
                        for governor, dep, dependent in parse.triples()] 
                            for parse in parses]
    cmd_list = []
    for dep_tree in parse_results:
         cmd_list.extend(parse_dep(dep_tree))

    return simplify(cmd_list)

def main():

    rospy.init_node("client")
    client = SpeechRecognitionClient()
    dep_parser = CoreNLPDependencyParser(url='http://localhost:9000')

    while not rospy.is_shutdown():
        result = client.recognize()  # Please say 'Hello, world!' towards microphone
        # result = TestCase()
        print(result) # => 'Hello, world!'
        for sentence in result.transcript:
            if "hey spot" in sentence:
                sentence = sentence.lower().replace("spot", "spot ,", 1) # add a comma behind "spot"
                cmd_list = gen_commands(dep_parser, sentence)
            else:
                print("Please start with hey spot")


if __name__ == "__main__":
	main()

